{
	"id": 0,
	"name": "@js-fns/core",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 171,
			"name": "RGBToHex",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 172,
					"name": "RGBTuple",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "RGBToHex.ts",
							"line": 6,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L6"
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "namedTupleMember",
								"name": "red",
								"isOptional": false,
								"element": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							{
								"type": "namedTupleMember",
								"name": "green",
								"isOptional": false,
								"element": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							{
								"type": "namedTupleMember",
								"name": "blue",
								"isOptional": false,
								"element": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							{
								"type": "namedTupleMember",
								"name": "alpha",
								"isOptional": true,
								"element": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				},
				{
					"id": 173,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "RGBToHex.ts",
							"line": 29,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L29"
						},
						{
							"fileName": "RGBToHex.ts",
							"line": 50,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L50"
						},
						{
							"fileName": "RGBToHex.ts",
							"line": 52,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L52"
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts an Array of R G B (A) colors into a hex color."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A Hex representation of the given color"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nRGBToHex([123, 123, 123]) // -> #7b7b7b\n\n// With alpha channel\nRGBToHex([123, 123, 123, 0.5]) // -> #7b7b7b80\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "RGBToHex.ts",
									"line": 29,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L29"
								}
							],
							"parameters": [
								{
									"id": 175,
									"name": "rgb",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The R G B (A) color represented as an array"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 172,
										"name": "RGBTuple",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 176,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts R G B (A) color arguments into a hex color."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A Hex representation of the given colors"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// RGB as arguments\nRGBToHex( 123, 123, 123 ) // -> #7b7b7b80\n\n// With alpha channel\nRGBToHex( 123, 123, 123, 0.5 ) // -> #7b7b7b80\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "RGBToHex.ts",
									"line": 50,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L50"
								}
							],
							"parameters": [
								{
									"id": 177,
									"name": "r",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Red color"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 178,
									"name": "g",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Green color"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 179,
									"name": "b",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Blue color"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 180,
									"name": "a",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alpha channel"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						172
					]
				},
				{
					"title": "Functions",
					"children": [
						173
					]
				}
			],
			"sources": [
				{
					"fileName": "RGBToHex.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/RGBToHex.ts#L1"
				}
			]
		},
		{
			"id": 1,
			"name": "camelCase",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "CamelCaseSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Settings for how to format the Camel Case"
							}
						]
					},
					"sources": [
						{
							"fileName": "camelCase.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L5"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": 121,
								"name": "PhrasifySettings",
								"package": "@js-fns/core"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 3,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 5,
											"name": "abbr",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Keep abbreviations uppercase (false == HTMLElement => HtmlElement | true == HTMLElement => HTMLElement)"
													}
												]
											},
											"sources": [
												{
													"fileName": "camelCase.ts",
													"line": 9,
													"character": 2,
													"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L9"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 4,
											"name": "upper",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Convert to UpperCase CamelCase (aka PascalCase)"
													}
												]
											},
											"sources": [
												{
													"fileName": "camelCase.ts",
													"line": 7,
													"character": 2,
													"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L7"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												5,
												4
											]
										}
									],
									"sources": [
										{
											"fileName": "camelCase.ts",
											"line": 5,
											"character": 51,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L5"
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 6,
					"name": "defaultSettings",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "camelCase.ts",
							"line": 13,
							"character": 13,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L13"
						}
					],
					"type": {
						"type": "reference",
						"target": 2,
						"name": "CamelCaseSettings",
						"package": "@js-fns/core"
					},
					"defaultValue": "..."
				},
				{
					"id": 7,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "camelCase.ts",
							"line": 40,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L40"
						}
					],
					"signatures": [
						{
							"id": 8,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transform a string into a camelCased word (eg. 'camel case' -> 'camelCase')"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The formatted string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ncamelCase('data-value2-input'); // -> dataValue2input\ncamelCase('XML data input'); // -> XmlDataInput\n\n// With settings\nconst settings = { abbr: true, numbers: true, upper: true };\n\ncamelCase('data-VALUE2-input', settings); // -> DataVALUE2Input\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "camelCase.ts",
									"line": 40,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L40"
								}
							],
							"parameters": [
								{
									"id": 9,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The string to format"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 10,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The settings for the transform"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 2,
										"name": "CamelCaseSettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						2
					]
				},
				{
					"title": "Variables",
					"children": [
						6
					]
				},
				{
					"title": "Functions",
					"children": [
						7
					]
				}
			],
			"sources": [
				{
					"fileName": "camelCase.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/camelCase.ts#L1"
				}
			]
		},
		{
			"id": 11,
			"name": "capitalize",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 12,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "capitalize.ts",
							"line": 14,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/capitalize.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 13,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Capitalize each word in a phrase"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Capitalized string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ncapitalize('capitalize this phrase'); // -> Capitalize This Phrase\ncapitalize('capitalize-This-phrase'); // -> Capitalize-This-Phrase\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "capitalize.ts",
									"line": 14,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/capitalize.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 14,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to capitalize"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						12
					]
				}
			],
			"sources": [
				{
					"fileName": "capitalize.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/capitalize.ts#L1"
				}
			]
		},
		{
			"id": 15,
			"name": "chunkString",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 16,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "chunkString.ts",
							"line": 15,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/chunkString.ts#L15"
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Split a String up into smaller strings of a give size (eg. 'ABCDEF' -> [AB,CD,EF])"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Array of string chunks"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nchunkString('abcdefghijkl'); // -> ['ab', 'cd', 'ef', 'gh', 'ij', 'kl']\nchunkString('abcdefghijkl', 4); // -> ['abcd', 'efgh', 'ijkl']\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "chunkString.ts",
									"line": 15,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/chunkString.ts#L15"
								}
							],
							"parameters": [
								{
									"id": 18,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to split up"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 19,
									"name": "size",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Size par chunk"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						16
					]
				}
			],
			"sources": [
				{
					"fileName": "chunkString.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/chunkString.ts#L1"
				}
			]
		},
		{
			"id": 20,
			"name": "currencyFormat",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 24,
					"name": "CurrencyFormatter",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "currencyFormat.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L5"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 25,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "currencyFormat.ts",
									"line": 5,
									"character": 32,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L5"
								}
							],
							"signatures": [
								{
									"id": 26,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 27,
											"name": "num",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					}
				},
				{
					"id": 21,
					"name": "currencyFormat",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "currencyFormat.ts",
							"line": 44,
							"character": 16,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L44"
						}
					],
					"signatures": [
						{
							"id": 22,
							"name": "currencyFormat",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a function that formats a number to a given currency format (eg. 1000 -> 1.000,00 €)\n\nThe template string should be the number 1000 described with before and after\nsymbols (no numbers), a thousand separator and a decimal separator followed by\nthe number of decimals defined with zeroes: "
									},
									{
										"kind": "code",
										"text": "`[before]1[thou.]000[dec.]00[after] -> $ 1,000.00`"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Curried function to format a given number"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// Format number to default currency format (euro)\nconst euro = currencyFormat();\neuro(2345234.678); // -> '2.345.234,68 €'\n\n// Format number to USD currency format\nconst usd = currencyFormat('$ 1,000.00');\nusd(2345234.678); // -> '$ 2,345,234.68'\n\n// Format number to custom currency format\nconst custom = currencyFormat('# 1-000;00 ¤');\ncustom(2345234.678); // -> '# 2-345-234;68 ¤'\n\n// Specifying number of decimals\nconst sixDecimals = currencyFormat('$ 1,000.000000');\nsixDecimals(2345234.678); // -> '$ 2,345,234.678000'\nsixDecimals(234.12345678); // -> '$ 234.123457'\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "currencyFormat.ts",
									"line": 44,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L44"
								}
							],
							"parameters": [
								{
									"id": 23,
									"name": "thousandTemplate",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The template for how to format a number, takes an example of 1000 in the desired currency (eg. '1.000,00 €')"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'1.000,00 €'"
								}
							],
							"type": {
								"type": "reference",
								"target": 24,
								"name": "CurrencyFormatter",
								"package": "@js-fns/core"
							}
						}
					]
				},
				{
					"id": 28,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "currencyFormat.ts",
							"line": 56,
							"character": 0,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L56"
						}
					],
					"signatures": [
						{
							"id": 29,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "currencyFormat.ts",
									"line": 5,
									"character": 32,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L5"
								}
							],
							"parameters": [
								{
									"id": 30,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						24
					]
				},
				{
					"title": "Functions",
					"children": [
						21,
						28
					]
				}
			],
			"sources": [
				{
					"fileName": "currencyFormat.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/currencyFormat.ts#L1"
				}
			]
		},
		{
			"id": 31,
			"name": "formatNumber",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 32,
					"name": "FormatNumberSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "formatNumber.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L5"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 33,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 36,
									"name": "decimal",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "formatNumber.ts",
											"line": 8,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L8"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 34,
									"name": "decimalCount",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "formatNumber.ts",
											"line": 6,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L6"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 35,
									"name": "thousand",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "formatNumber.ts",
											"line": 7,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L7"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										36,
										34,
										35
									]
								}
							],
							"sources": [
								{
									"fileName": "formatNumber.ts",
									"line": 5,
									"character": 35,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L5"
								}
							]
						}
					}
				},
				{
					"id": 37,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "formatNumber.ts",
							"line": 39,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L39"
						}
					],
					"signatures": [
						{
							"id": 38,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Formats a number with defined thousand and decimal separator, and a decimal limit\n(see "
									},
									{
										"kind": "code",
										"text": "`limitDecimals`"
									},
									{
										"kind": "text",
										"text": " for details on "
									},
									{
										"kind": "code",
										"text": "`decimalCount`"
									},
									{
										"kind": "text",
										"text": ")"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Formatted number as a string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// Default format\nformatNumber(123456); // -> 123.456,00\n\n// Custom format\nformatNumber(123456, { decimalCount: '>3', thousand: '-', decimal: ':' }); // -> 123-456:000\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "formatNumber.ts",
									"line": 39,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L39"
								}
							],
							"parameters": [
								{
									"id": 39,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to format"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 40,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Settings for the number formatting"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 32,
										"name": "FormatNumberSettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						32
					]
				},
				{
					"title": "Functions",
					"children": [
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "formatNumber.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/formatNumber.ts#L1"
				}
			]
		},
		{
			"id": 41,
			"name": "hash",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 45,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "hash.ts",
							"line": 37,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hash.ts#L37"
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates a unique hash (DJB2) string from a string"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nhash('Hash this string'); // -> sg463l\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Hash string"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "hash.ts",
									"line": 37,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hash.ts#L37"
								}
							],
							"parameters": [
								{
									"id": 47,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to generate hash string from"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "hashCode",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "hash.ts",
							"line": 13,
							"character": 16,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hash.ts#L13"
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "hashCode",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generates a unique numeric hash (DJB2) code from a string"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Hash code"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nhashCode('Hash this string'); // -> 1720121313\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "hash.ts",
									"line": 13,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hash.ts#L13"
								}
							],
							"parameters": [
								{
									"id": 44,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to generate hash code from"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						45,
						42
					]
				}
			],
			"sources": [
				{
					"fileName": "hash.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hash.ts#L1"
				}
			]
		},
		{
			"id": 48,
			"name": "hexToNumber",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 49,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "hexToNumber.ts",
							"line": 13,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToNumber.ts#L13"
						}
					],
					"signatures": [
						{
							"id": 50,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convert Hexadecimal into a number (eg. b4 => 180)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Numeric representation of the hex code"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nhexToNumber('ba'); // -> 186\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "hexToNumber.ts",
									"line": 13,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToNumber.ts#L13"
								}
							],
							"parameters": [
								{
									"id": 51,
									"name": "hex",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Hex code to parse"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						49
					]
				}
			],
			"sources": [
				{
					"fileName": "hexToNumber.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToNumber.ts#L1"
				}
			]
		},
		{
			"id": 52,
			"name": "hexToRGB",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 53,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "hexToRGB.ts",
							"line": 22,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToRGB.ts#L22"
						}
					],
					"signatures": [
						{
							"id": 54,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts a Hexadecimal color to a RGB(A) color array"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Array with RGB values"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nhexToRGB('#2fd466'); // -> [47, 212, 102]\n\n// And with alpha channel\nhexToRGB('#2fd46680'); // -> [47, 212, 102, 0.5]\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "hexToRGB.ts",
									"line": 22,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToRGB.ts#L22"
								}
							],
							"parameters": [
								{
									"id": 55,
									"name": "hex",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Hex color to convert to RGB"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						53
					]
				}
			],
			"sources": [
				{
					"fileName": "hexToRGB.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/hexToRGB.ts#L1"
				}
			]
		},
		{
			"id": 56,
			"name": "index",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 233,
					"name": "RGBToHex",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 29,
							"character": 20
						}
					],
					"target": 173
				},
				{
					"id": 205,
					"name": "camelCase",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 1,
							"character": 20
						}
					],
					"target": 7
				},
				{
					"id": 206,
					"name": "capitalize",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 2,
							"character": 20
						}
					],
					"target": 12
				},
				{
					"id": 207,
					"name": "chunkString",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 3,
							"character": 20
						}
					],
					"target": 16
				},
				{
					"id": 208,
					"name": "currencyFormat",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 4,
							"character": 20
						}
					],
					"target": 28
				},
				{
					"id": 209,
					"name": "formatNumber",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 5,
							"character": 20
						}
					],
					"target": 37
				},
				{
					"id": 210,
					"name": "hash",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 6,
							"character": 20
						}
					],
					"target": 45
				},
				{
					"id": 211,
					"name": "hexToNumber",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 7,
							"character": 20
						}
					],
					"target": 49
				},
				{
					"id": 212,
					"name": "hexToRGB",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 8,
							"character": 20
						}
					],
					"target": 53
				},
				{
					"id": 213,
					"name": "isBoolean",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 9,
							"character": 20
						}
					],
					"target": 58
				},
				{
					"id": 214,
					"name": "isFunction",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 10,
							"character": 20
						}
					],
					"target": 62
				},
				{
					"id": 215,
					"name": "isGenerator",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 11,
							"character": 20
						}
					],
					"target": 69
				},
				{
					"id": 216,
					"name": "isNumber",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 12,
							"character": 20
						}
					],
					"target": 73
				},
				{
					"id": 217,
					"name": "isNumeric",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 13,
							"character": 20
						}
					],
					"target": 77
				},
				{
					"id": 218,
					"name": "isObject",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 14,
							"character": 20
						}
					],
					"target": 81
				},
				{
					"id": 219,
					"name": "isString",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 15,
							"character": 20
						}
					],
					"target": 85
				},
				{
					"id": 220,
					"name": "kebabCase",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 16,
							"character": 20
						}
					],
					"target": 90
				},
				{
					"id": 221,
					"name": "leadingZero",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 17,
							"character": 20
						}
					],
					"target": 95
				},
				{
					"id": 222,
					"name": "limitDecimals",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 18,
							"character": 20
						}
					],
					"target": 100
				},
				{
					"id": 223,
					"name": "minMax",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 19,
							"character": 20
						}
					],
					"target": 105
				},
				{
					"id": 224,
					"name": "numberToHex",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 20,
							"character": 20
						}
					],
					"target": 111
				},
				{
					"id": 225,
					"name": "pascalCase",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 21,
							"character": 20
						}
					],
					"target": 116
				},
				{
					"id": 226,
					"name": "phrasify",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 22,
							"character": 20
						}
					],
					"target": 124
				},
				{
					"id": 227,
					"name": "popIndex",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 23,
							"character": 20
						}
					],
					"target": 133
				},
				{
					"id": 228,
					"name": "promisefy",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 24,
							"character": 20
						}
					],
					"target": 151
				},
				{
					"id": 229,
					"name": "randomHexColor",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 25,
							"character": 20
						}
					],
					"target": 155
				},
				{
					"id": 230,
					"name": "randomId",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 26,
							"character": 20
						}
					],
					"target": 158
				},
				{
					"id": 231,
					"name": "randomInt",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 27,
							"character": 20
						}
					],
					"target": 162
				},
				{
					"id": 232,
					"name": "randomRGBColor",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 28,
							"character": 20
						}
					],
					"target": 169
				},
				{
					"id": 234,
					"name": "safeDateChange",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 30,
							"character": 20
						}
					],
					"target": 182
				},
				{
					"id": 235,
					"name": "snakeCase",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 31,
							"character": 20
						}
					],
					"target": 188
				},
				{
					"id": 236,
					"name": "truncate",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 32,
							"character": 20
						}
					],
					"target": 197
				},
				{
					"id": 237,
					"name": "uniqueArray",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "index.ts",
							"line": 33,
							"character": 20
						}
					],
					"target": 202
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						233,
						205,
						206,
						207,
						208,
						209,
						210,
						211,
						212,
						213,
						214,
						215,
						216,
						217,
						218,
						219,
						220,
						221,
						222,
						223,
						224,
						225,
						226,
						227,
						228,
						229,
						230,
						231,
						232,
						234,
						235,
						236,
						237
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 57,
			"name": "isBoolean",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 58,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isBoolean.ts",
							"line": 14,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isBoolean.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument a boolean"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a Boolean or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nisBoolean(false); // -> true\nisBoolean('string'); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isBoolean.ts",
									"line": 14,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isBoolean.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 60,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "boolean"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						58
					]
				}
			],
			"sources": [
				{
					"fileName": "isBoolean.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isBoolean.ts#L1"
				}
			]
		},
		{
			"id": 61,
			"name": "isFunction",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 62,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isFunction.ts",
							"line": 15,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isFunction.ts#L15"
						}
					],
					"signatures": [
						{
							"id": 63,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument a Function"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a Function or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nisFunction(() => {}); // -> true\nisFunction('string'); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isFunction.ts",
									"line": 15,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isFunction.ts#L15"
								}
							],
							"parameters": [
								{
									"id": 64,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						62
					]
				}
			],
			"sources": [
				{
					"fileName": "isFunction.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isFunction.ts#L1"
				}
			]
		},
		{
			"id": 65,
			"name": "isGenerator",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 69,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isGenerator.ts",
							"line": 48,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isGenerator.ts#L48"
						}
					],
					"signatures": [
						{
							"id": 70,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determine if the given argument is a Generator Function"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nfunction* gen() {}\n\nisGeneratorFunction(gen); // -> true\nisGeneratorFunction(() => {}); // -> false\n```"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a Generator or not"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isGenerator.ts",
									"line": 48,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isGenerator.ts#L48"
								}
							],
							"parameters": [
								{
									"id": 71,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.generator.d.ts",
										"qualifiedName": "GeneratorFunction"
									},
									"name": "GeneratorFunction",
									"package": "typescript"
								}
							}
						}
					]
				},
				{
					"id": 66,
					"name": "isGenerator",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isGenerator.ts",
							"line": 23,
							"character": 16,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isGenerator.ts#L23"
						}
					],
					"signatures": [
						{
							"id": 67,
							"name": "isGenerator",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Determine if the given argument is a Generator object.\n(A generator is the one created when calling a generator function)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a Generator like function or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nfunction *gen() {}\n\nisGenerator(gen()); // -> true\nisGenerator({ next() {}, throw() {} return() {} [Symbol.iterator]() {} }); // -> true\nisGenerator(() => {}); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isGenerator.ts",
									"line": 23,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isGenerator.ts#L23"
								}
							],
							"parameters": [
								{
									"id": 68,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.generator.d.ts",
										"qualifiedName": "Generator"
									},
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "unknown"
										},
										{
											"type": "intrinsic",
											"name": "any"
										},
										{
											"type": "intrinsic",
											"name": "unknown"
										}
									],
									"name": "Generator",
									"package": "typescript"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						69,
						66
					]
				}
			],
			"sources": [
				{
					"fileName": "isGenerator.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isGenerator.ts#L1"
				}
			]
		},
		{
			"id": 72,
			"name": "isNumber",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 73,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isNumber.ts",
							"line": 15,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumber.ts#L15"
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument is a finite Number"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a finite number or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nisNumber(123); // -> true\nisNumber(Infinity); // -> false\nisNumber('123'); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isNumber.ts",
									"line": 15,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumber.ts#L15"
								}
							],
							"parameters": [
								{
									"id": 75,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						73
					]
				}
			],
			"sources": [
				{
					"fileName": "isNumber.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumber.ts#L1"
				}
			]
		},
		{
			"id": 76,
			"name": "isNumeric",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 77,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isNumeric.ts",
							"line": 20,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumeric.ts#L20"
						}
					],
					"signatures": [
						{
							"id": 78,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument is a finite numeric value (number as string or number directly) or not."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the given argument is a numeric value"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nisNumeric(123); // -> true\nisNumeric('123'); // -> true\nisNumeric(Infinity); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isNumeric.ts",
									"line": 20,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumeric.ts#L20"
								}
							],
							"parameters": [
								{
									"id": 79,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						77
					]
				}
			],
			"sources": [
				{
					"fileName": "isNumeric.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isNumeric.ts#L1"
				}
			]
		},
		{
			"id": 80,
			"name": "isObject",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 81,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isObject.ts",
							"line": 17,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isObject.ts#L17"
						}
					],
					"signatures": [
						{
							"id": 82,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument of type String"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a plain object or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass Obj {}\n\nisObject({}); // -> true\nisObject(new Obj()); // -> true\nisObject('123'); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isObject.ts",
									"line": 17,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isObject.ts#L17"
								}
							],
							"parameters": [
								{
									"id": 83,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Argument to test"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "object"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						81
					]
				}
			],
			"sources": [
				{
					"fileName": "isObject.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isObject.ts#L1"
				}
			]
		},
		{
			"id": 84,
			"name": "isString",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 85,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "isString.ts",
							"line": 14,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isString.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 86,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Is the given argument of type String"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the argument a string or not"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nisString('string'); // -> true\nisString(123); // -> false\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "isString.ts",
									"line": 14,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isString.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 87,
									"name": "x",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							],
							"type": {
								"type": "predicate",
								"name": "x",
								"asserts": false,
								"targetType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						85
					]
				}
			],
			"sources": [
				{
					"fileName": "isString.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/isString.ts#L1"
				}
			]
		},
		{
			"id": 88,
			"name": "kebabCase",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 89,
					"name": "KebabCaseSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "kebabCase.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/kebabCase.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": 121,
						"name": "PhrasifySettings",
						"package": "@js-fns/core"
					}
				},
				{
					"id": 90,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "kebabCase.ts",
							"line": 24,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/kebabCase.ts#L24"
						}
					],
					"signatures": [
						{
							"id": 91,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transform phrase into a dashed phrase\n(eg. 'camelCase' -> 'camel-case' or 'spaced phrase' -> 'spaced-phrase')"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The string with spaces replaced by a dash (-)"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ndashed('some dashed phrase'); // -> some-dashed-phrase\ndasher('dash version1 beta', { numbers: true }); // -> dash-version-1-beta\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "kebabCase.ts",
									"line": 24,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/kebabCase.ts#L24"
								}
							],
							"parameters": [
								{
									"id": 92,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to transform"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 93,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Settings to pass to the phrasify function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 121,
										"name": "PhrasifySettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						89
					]
				},
				{
					"title": "Functions",
					"children": [
						90
					]
				}
			],
			"sources": [
				{
					"fileName": "kebabCase.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/kebabCase.ts#L1"
				}
			]
		},
		{
			"id": 94,
			"name": "leadingZero",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 95,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "leadingZero.ts",
							"line": 16,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/leadingZero.ts#L16"
						}
					],
					"signatures": [
						{
							"id": 96,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Makes sure a given number is a certain length and fills excess space with zeroes (0)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The given number as a string padded with zeroes to match the given min length"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nleadingZero(1); // -> '01'\nleadingZero(123); // -> '123'\nleadingZero(123, 5); // -> '00123'\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "leadingZero.ts",
									"line": 16,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/leadingZero.ts#L16"
								}
							],
							"parameters": [
								{
									"id": 97,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to add leading zeroes to"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 98,
									"name": "len",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "minimum length of the returned string"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						95
					]
				}
			],
			"sources": [
				{
					"fileName": "leadingZero.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/leadingZero.ts#L1"
				}
			]
		},
		{
			"id": 99,
			"name": "limitDecimals",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 100,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "limitDecimals.ts",
							"line": 50,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/limitDecimals.ts#L50"
						}
					],
					"signatures": [
						{
							"id": 101,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Limit decimals of a floating number to specified length. The length depends on\n"
									},
									{
										"kind": "code",
										"text": "`decimals`"
									},
									{
										"kind": "text",
										"text": " which can have the following settings (n = integer):\n\nChar | Description\n----- | -------------\n**>n** | Minimum number of decimals, if the current number of decimals are shorter than the defined length, extra 0 (zeros) will be added.\n**<n** | Maximum number of decimals, longer decimals will be rounded and shortened down to this number.\n**n** | Match this exact number of decimals, rounding longer decimals and adding extra 0 (zeroes) to shorter ones."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "String representation of the number with the decimals adjusted according to the decimal setting"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// Exact number of decimals\nlimitDecimals(123.4567) // -> 123.46\nlimitDecimals(123, 5) // -> 123.00000\n\n// Max number of decimals\nlimitDecimals(123.4567, '<3') // -> 123.457\nlimitDecimals(123, '<3') // -> 123\n\n// Min number decimals\nlimitDecimals(123.4, '>4') // -> 123.4000\nlimitDecimals(123.456789, '>4') // -> 123.456789\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "limitDecimals.ts",
									"line": 50,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/limitDecimals.ts#L50"
								}
							],
							"parameters": [
								{
									"id": 102,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to limit the decimals on"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 103,
									"name": "decimalCount",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Setting for how to handle the decimals"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						100
					]
				}
			],
			"sources": [
				{
					"fileName": "limitDecimals.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/limitDecimals.ts#L1"
				}
			]
		},
		{
			"id": 104,
			"name": "minMax",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 105,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "minMax.ts",
							"line": 17,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/minMax.ts#L17"
						}
					],
					"signatures": [
						{
							"id": 106,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Limit a number to a certain range defined by Minimum and a Maximum"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The number limited to the min/max boundaries"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\r\nminMax(5, 10, 20); // -> 10\r\nminMax(15, 10, 20); // -> 15\r\nminMax(25, 10, 20); // -> 20\r\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "minMax.ts",
									"line": 17,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/minMax.ts#L17"
								}
							],
							"parameters": [
								{
									"id": 107,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The number to limit"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 108,
									"name": "min",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Lower limit"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 109,
									"name": "max",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Upper limit"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						105
					]
				}
			],
			"sources": [
				{
					"fileName": "minMax.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/minMax.ts#L1"
				}
			]
		},
		{
			"id": 110,
			"name": "numberToHex",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 111,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "numberToHex.ts",
							"line": 17,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/numberToHex.ts#L17"
						}
					],
					"signatures": [
						{
							"id": 112,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Convert a number to a Hexadecimal representation (eg. 180 => b4)"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Hex representation of the given number"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nnumberToHex(180); // -> 'b4'\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "numberToHex.ts",
									"line": 17,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/numberToHex.ts#L17"
								}
							],
							"parameters": [
								{
									"id": 113,
									"name": "num",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Number to convert"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						111
					]
				}
			],
			"sources": [
				{
					"fileName": "numberToHex.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/numberToHex.ts#L1"
				}
			]
		},
		{
			"id": 114,
			"name": "pascalCase",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 115,
					"name": "PascalCaseSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "pascalCase.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/pascalCase.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2,
								"name": "CamelCaseSettings",
								"package": "@js-fns/core"
							},
							{
								"type": "literal",
								"value": "upper"
							}
						],
						"name": "Omit",
						"package": "typescript"
					}
				},
				{
					"id": 116,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "pascalCase.ts",
							"line": 28,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/pascalCase.ts#L28"
						}
					],
					"signatures": [
						{
							"id": 117,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transform a string into a PascalCased word (eg. 'pascal case' -> 'PascalCase')"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The formatted string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\npascalCase('data-value2-input'); // -> DataValue2input\npascalCase('XML data input'); // -> XmlDataInput\n\n// With settings\nconst settings = { abbr: true, numbers: true };\n\npascalCase('data-VALUE2-input', settings); // -> DataVALUE2Input\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "pascalCase.ts",
									"line": 28,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/pascalCase.ts#L28"
								}
							],
							"parameters": [
								{
									"id": 118,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The string to format"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 119,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The settings for the transform"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 115,
										"name": "PascalCaseSettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						115
					]
				},
				{
					"title": "Functions",
					"children": [
						116
					]
				}
			],
			"sources": [
				{
					"fileName": "pascalCase.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/pascalCase.ts#L1"
				}
			]
		},
		{
			"id": 120,
			"name": "phrasify",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 121,
					"name": "PhrasifySettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "phrasify.ts",
							"line": 1,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L1"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 122,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 123,
									"name": "numbers",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "phrasify.ts",
											"line": 2,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L2"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										123
									]
								}
							],
							"sources": [
								{
									"fileName": "phrasify.ts",
									"line": 1,
									"character": 31,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L1"
								}
							]
						}
					}
				},
				{
					"id": 124,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "phrasify.ts",
							"line": 24,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L24"
						}
					],
					"signatures": [
						{
							"id": 125,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transform a string into a space separated phrase"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The transformed phrase or word"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nphrasify('XMLDataInput'); // -> XML data input\nphrasify('dataVALUE2-input', { numbers: true }); // -> data VALUE 2 input\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "phrasify.ts",
									"line": 24,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L24"
								}
							],
							"parameters": [
								{
									"id": 126,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The string to transform"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 127,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The settings for the transform"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 121,
										"name": "PhrasifySettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						121
					]
				},
				{
					"title": "Functions",
					"children": [
						124
					]
				}
			],
			"sources": [
				{
					"fileName": "phrasify.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/phrasify.ts#L1"
				}
			]
		},
		{
			"id": 128,
			"name": "popIndex",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 133,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "popIndex.ts",
							"line": 40,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/popIndex.ts#L40"
						}
					],
					"signatures": [
						{
							"id": 134,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes and returns an entry from a given array, at a designated index position.\r\nWARNING: This is not a pure function and will alter the given array internally"
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\r\npopIndex([1,2,3], 1); // -> 2 (array will then be [1, 3])\r\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "popIndex.ts",
									"line": 40,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/popIndex.ts#L40"
								}
							],
							"parameters": [
								{
									"id": 135,
									"name": "list",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Array to remove the item from"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								},
								{
									"id": 136,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "At what index to remove from"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					]
				},
				{
					"id": 129,
					"name": "popIndexPure",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "popIndex.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/popIndex.ts#L16"
						}
					],
					"signatures": [
						{
							"id": 130,
							"name": "popIndexPure",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes and returns an entry from a given array, at a designated index position.\r\nWARNING: This is not a pure function and will alter the given array internally"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An array with two entries: the first entry is the value just removed and the second\r\n         is the new array with the entry removed."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\r\npopIndex([1,2,3], 1); // -> 2 (array will then be [1, 3])\r\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "popIndex.ts",
									"line": 16,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/popIndex.ts#L16"
								}
							],
							"parameters": [
								{
									"id": 131,
									"name": "list",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Array to remove the item from"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								},
								{
									"id": 132,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "At what index to remove from"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						133,
						129
					]
				}
			],
			"sources": [
				{
					"fileName": "popIndex.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/popIndex.ts#L1"
				}
			]
		},
		{
			"id": 137,
			"name": "promisefy",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 138,
					"name": "NodeLikeCallback",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "promisefy.ts",
							"line": 3,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L3"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 139,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "promisefy.ts",
									"line": 3,
									"character": 31,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L3"
								}
							],
							"signatures": [
								{
									"id": 140,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 141,
											"name": "err",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Error"
														},
														"name": "Error",
														"package": "typescript"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										},
										{
											"id": 142,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							]
						}
					}
				},
				{
					"id": 147,
					"name": "PromisefiedFunction",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "promisefy.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L5"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 148,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "promisefy.ts",
									"line": 5,
									"character": 34,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L5"
								}
							],
							"signatures": [
								{
									"id": 149,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 150,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					}
				},
				{
					"id": 143,
					"name": "PromisefyCallback",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "promisefy.ts",
							"line": 4,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L4"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 144,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "promisefy.ts",
									"line": 4,
									"character": 32,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L4"
								}
							],
							"signatures": [
								{
									"id": 145,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 146,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							]
						}
					}
				},
				{
					"id": 151,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "promisefy.ts",
							"line": 28,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L28"
						}
					],
					"signatures": [
						{
							"id": 152,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Converts a callback based action into one returning a Promise instead."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The formatted string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nfunction action(name, callback) { ... callback(); }\n\naction = promisefy(action);\n\naction\n  .then(() => 'all good')\n  .catch(() => 'Something went wrong');\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "promisefy.ts",
									"line": 28,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L28"
								}
							],
							"parameters": [
								{
									"id": 153,
									"name": "fn",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 143,
										"name": "PromisefyCallback",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 147,
								"name": "PromisefiedFunction",
								"package": "@js-fns/core"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						138,
						147,
						143
					]
				},
				{
					"title": "Functions",
					"children": [
						151
					]
				}
			],
			"sources": [
				{
					"fileName": "promisefy.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/promisefy.ts#L1"
				}
			]
		},
		{
			"id": 154,
			"name": "randomHexColor",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 155,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "randomHexColor.ts",
							"line": 16,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomHexColor.ts#L16"
						}
					],
					"signatures": [
						{
							"id": 156,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a random HEX color"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A random hex color"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nrandomHexColor(); // -> eg. #f42c71\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "randomHexColor.ts",
									"line": 16,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomHexColor.ts#L16"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						155
					]
				}
			],
			"sources": [
				{
					"fileName": "randomHexColor.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomHexColor.ts#L1"
				}
			]
		},
		{
			"id": 157,
			"name": "randomId",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 158,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "randomId.ts",
							"line": 12,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomId.ts#L12"
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a random id of designated length"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A random generated id"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nrandomId(); // -> eg. 'efuc6f1n4xf'\nrandomId(20); // -> eg. '3vsmrbxlh9at0vhcsf1xh'\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "randomId.ts",
									"line": 12,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomId.ts#L12"
								}
							],
							"parameters": [
								{
									"id": 160,
									"name": "length",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "10"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						158
					]
				}
			],
			"sources": [
				{
					"fileName": "randomId.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomId.ts#L1"
				}
			]
		},
		{
			"id": 161,
			"name": "randomInt",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 162,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "randomInt.ts",
							"line": 22,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L22"
						},
						{
							"fileName": "randomInt.ts",
							"line": 40,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L40"
						},
						{
							"fileName": "randomInt.ts",
							"line": 42,
							"character": 9,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L42"
						}
					],
					"signatures": [
						{
							"id": 163,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a random integer from a base number or range of numbers"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A random number between the given min and max"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\r\nrandomInt(100, 200); // -> a number between 100 and 200\r\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "randomInt.ts",
									"line": 22,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L22"
								}
							],
							"parameters": [
								{
									"id": 164,
									"name": "min",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The minimum number to generate"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 165,
									"name": "max",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The maximum number to generate"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 166,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a random integer from a base number or range of numbers"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A random number between 0 and the given max"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\r\n// Any random number\r\nrandomInt(); // -> a number between 0 and Number.MAX_SAFE_INTEGER\r\n\r\n// With max number\r\nrandomInt(100); // -> a number between 0 and 100\r\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "randomInt.ts",
									"line": 40,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L40"
								}
							],
							"parameters": [
								{
									"id": 167,
									"name": "max",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The maximum number to generate"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						162
					]
				}
			],
			"sources": [
				{
					"fileName": "randomInt.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomInt.ts#L1"
				}
			]
		},
		{
			"id": 168,
			"name": "randomRGBColor",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 169,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "randomRGBColor.ts",
							"line": 15,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomRGBColor.ts#L15"
						}
					],
					"signatures": [
						{
							"id": 170,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Generate a random RGB color"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An Array with random R G B values"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nrandomRGBColor(); // -> eg. [169, 100, 52]\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "randomRGBColor.ts",
									"line": 15,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomRGBColor.ts#L15"
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "namedTupleMember",
										"name": "r",
										"isOptional": false,
										"element": {
											"type": "intrinsic",
											"name": "number"
										}
									},
									{
										"type": "namedTupleMember",
										"name": "g",
										"isOptional": false,
										"element": {
											"type": "intrinsic",
											"name": "number"
										}
									},
									{
										"type": "namedTupleMember",
										"name": "b",
										"isOptional": false,
										"element": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						169
					]
				}
			],
			"sources": [
				{
					"fileName": "randomRGBColor.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/randomRGBColor.ts#L1"
				}
			]
		},
		{
			"id": 181,
			"name": "safeDateChange",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 182,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "safeDateChange.ts",
							"line": 25,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/safeDateChange.ts#L25"
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Verifies and corrects Dates where the month could accidentally have skipped into the\nnext month because the date is out of bounds by the month changed to."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Altered \"to\" date"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nconst date = new Date(2017, 0, 31);\nnewDate = new Date(date);\nnewDate.setMonth(1);\n\n// Normally you would expect \"newDate\" month to be February, but since the date\n// of the previous date was 31 and february max date is 28 (or 29), the actual\n// \"newDate\" is \"Match 3rd 2017\" (or 2nd). Using this function keeps it at \"February 28 2017\"\n\nsafeDateChange(date, newDate);\n\n// newDate === \"February 28 2017\"\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "safeDateChange.ts",
									"line": 25,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/safeDateChange.ts#L25"
								}
							],
							"parameters": [
								{
									"id": 184,
									"name": "from",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Date going from"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								},
								{
									"id": 185,
									"name": "to",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Date going to"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Date"
								},
								"name": "Date",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						182
					]
				}
			],
			"sources": [
				{
					"fileName": "safeDateChange.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/safeDateChange.ts#L1"
				}
			]
		},
		{
			"id": 186,
			"name": "snakeCase",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 187,
					"name": "SnakeCaseSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "snakeCase.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/snakeCase.ts#L5"
						}
					],
					"type": {
						"type": "reference",
						"target": 121,
						"name": "PhrasifySettings",
						"package": "@js-fns/core"
					}
				},
				{
					"id": 188,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "snakeCase.ts",
							"line": 24,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/snakeCase.ts#L24"
						}
					],
					"signatures": [
						{
							"id": 189,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Transform phrase into a snake_case phrase\n(eg. 'camelCase' -> 'camel-case' or 'spaced phrase' -> 'spaced-phrase')"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The string transformed to snake_case"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nsnakeCase('Convert This phrase'); // -> convert_this_phrase\nsnakeCase('dash VERSION1 beta', { numbers: true }); // -> dash_version_1_beta\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "snakeCase.ts",
									"line": 24,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/snakeCase.ts#L24"
								}
							],
							"parameters": [
								{
									"id": 190,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to transform"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 191,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Settings to pass to the phrasify function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 121,
										"name": "PhrasifySettings",
										"package": "@js-fns/core"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						187
					]
				},
				{
					"title": "Functions",
					"children": [
						188
					]
				}
			],
			"sources": [
				{
					"fileName": "snakeCase.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/snakeCase.ts#L1"
				}
			]
		},
		{
			"id": 192,
			"name": "truncate",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 193,
					"name": "TruncateSettings",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"sources": [
						{
							"fileName": "truncate.ts",
							"line": 5,
							"character": 12,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L5"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 194,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 196,
									"name": "end",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "truncate.ts",
											"line": 7,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L7"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 195,
									"name": "maxLength",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "truncate.ts",
											"line": 6,
											"character": 2,
											"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L6"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										196,
										195
									]
								}
							],
							"sources": [
								{
									"fileName": "truncate.ts",
									"line": 5,
									"character": 31,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L5"
								}
							]
						}
					}
				},
				{
					"id": 197,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "truncate.ts",
							"line": 27,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L27"
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Limits a string to a given number of characters and adds '...' in the end"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The truncated string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\ntruncate('No max length to the string'); // -> No max limit to the string length\ntruncate('With a max length to the string', { maxLength: 10 }); // -> With a max...\ntruncate('With a max length to the string and a differnet ending', { maxLength: 10, end: ' <---' }); // -> With a max <---\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "truncate.ts",
									"line": 27,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L27"
								}
							],
							"parameters": [
								{
									"id": 199,
									"name": "str",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "String to truncate"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 200,
									"name": "settings",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Settings to use with the truncation"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 193,
										"name": "TruncateSettings",
										"package": "@js-fns/core"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Type Aliases",
					"children": [
						193
					]
				},
				{
					"title": "Functions",
					"children": [
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "truncate.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/truncate.ts#L1"
				}
			]
		},
		{
			"id": 201,
			"name": "uniqueArray",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 202,
					"name": "default",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "uniqueArray.ts",
							"line": 14,
							"character": 24,
							"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/uniqueArray.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 203,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Filter out unknown duplicate values from an array"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The truncated string"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nuniqueArray([1,2,3,1,4,5,3,7]); // -> [1,2,3,4,5,6,7]\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "uniqueArray.ts",
									"line": 14,
									"character": 0,
									"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/uniqueArray.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 204,
									"name": "arr",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Array to filter on"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						202
					]
				}
			],
			"sources": [
				{
					"fileName": "uniqueArray.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Tokimon/js-fns/blob/990f815/packages/core/src/uniqueArray.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				171,
				1,
				11,
				15,
				20,
				31,
				41,
				48,
				52,
				56,
				57,
				61,
				65,
				72,
				76,
				80,
				84,
				88,
				94,
				99,
				104,
				110,
				114,
				120,
				128,
				137,
				154,
				157,
				161,
				168,
				181,
				186,
				192,
				201
			]
		}
	],
	"packageName": "@js-fns/core",
	"symbolIdMap": {
		"1": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "CamelCaseSettings"
		},
		"3": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "__type"
		},
		"4": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "__type.upper"
		},
		"5": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "__type.abbr"
		},
		"6": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "defaultSettings"
		},
		"7": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "camelCase"
		},
		"8": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "camelCase"
		},
		"9": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "input"
		},
		"10": {
			"sourceFileName": "src/camelCase.ts",
			"qualifiedName": "settings"
		},
		"11": {
			"sourceFileName": "src/capitalize.ts",
			"qualifiedName": ""
		},
		"12": {
			"sourceFileName": "src/capitalize.ts",
			"qualifiedName": "default"
		},
		"13": {
			"sourceFileName": "src/capitalize.ts",
			"qualifiedName": "default"
		},
		"14": {
			"sourceFileName": "src/capitalize.ts",
			"qualifiedName": "str"
		},
		"15": {
			"sourceFileName": "src/chunkString.ts",
			"qualifiedName": ""
		},
		"16": {
			"sourceFileName": "src/chunkString.ts",
			"qualifiedName": "default"
		},
		"17": {
			"sourceFileName": "src/chunkString.ts",
			"qualifiedName": "default"
		},
		"18": {
			"sourceFileName": "src/chunkString.ts",
			"qualifiedName": "str"
		},
		"19": {
			"sourceFileName": "src/chunkString.ts",
			"qualifiedName": "size"
		},
		"20": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": ""
		},
		"21": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "currencyFormat"
		},
		"22": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "currencyFormat"
		},
		"23": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "thousandTemplate"
		},
		"24": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "CurrencyFormatter"
		},
		"25": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "__type"
		},
		"26": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "__type"
		},
		"27": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "num"
		},
		"28": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "default"
		},
		"29": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "default"
		},
		"30": {
			"sourceFileName": "src/currencyFormat.ts",
			"qualifiedName": "num"
		},
		"31": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": ""
		},
		"32": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "FormatNumberSettings"
		},
		"33": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "__type"
		},
		"34": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "__type.decimalCount"
		},
		"35": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "__type.thousand"
		},
		"36": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "__type.decimal"
		},
		"37": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "default"
		},
		"38": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "default"
		},
		"39": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "num"
		},
		"40": {
			"sourceFileName": "src/formatNumber.ts",
			"qualifiedName": "settings"
		},
		"41": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": ""
		},
		"42": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "hashCode"
		},
		"43": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "hashCode"
		},
		"44": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "str"
		},
		"45": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "default"
		},
		"46": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "default"
		},
		"47": {
			"sourceFileName": "src/hash.ts",
			"qualifiedName": "str"
		},
		"48": {
			"sourceFileName": "src/hexToNumber.ts",
			"qualifiedName": ""
		},
		"49": {
			"sourceFileName": "src/hexToNumber.ts",
			"qualifiedName": "default"
		},
		"50": {
			"sourceFileName": "src/hexToNumber.ts",
			"qualifiedName": "default"
		},
		"51": {
			"sourceFileName": "src/hexToNumber.ts",
			"qualifiedName": "hex"
		},
		"52": {
			"sourceFileName": "src/hexToRGB.ts",
			"qualifiedName": ""
		},
		"53": {
			"sourceFileName": "src/hexToRGB.ts",
			"qualifiedName": "default"
		},
		"54": {
			"sourceFileName": "src/hexToRGB.ts",
			"qualifiedName": "default"
		},
		"55": {
			"sourceFileName": "src/hexToRGB.ts",
			"qualifiedName": "hex"
		},
		"56": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"57": {
			"sourceFileName": "src/isBoolean.ts",
			"qualifiedName": ""
		},
		"58": {
			"sourceFileName": "src/isBoolean.ts",
			"qualifiedName": "default"
		},
		"59": {
			"sourceFileName": "src/isBoolean.ts",
			"qualifiedName": "default"
		},
		"60": {
			"sourceFileName": "src/isBoolean.ts",
			"qualifiedName": "x"
		},
		"61": {
			"sourceFileName": "src/isFunction.ts",
			"qualifiedName": ""
		},
		"62": {
			"sourceFileName": "src/isFunction.ts",
			"qualifiedName": "default"
		},
		"63": {
			"sourceFileName": "src/isFunction.ts",
			"qualifiedName": "default"
		},
		"64": {
			"sourceFileName": "src/isFunction.ts",
			"qualifiedName": "x"
		},
		"65": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": ""
		},
		"66": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "isGenerator"
		},
		"67": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "isGenerator"
		},
		"68": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "x"
		},
		"69": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "default"
		},
		"70": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "default"
		},
		"71": {
			"sourceFileName": "src/isGenerator.ts",
			"qualifiedName": "x"
		},
		"72": {
			"sourceFileName": "src/isNumber.ts",
			"qualifiedName": ""
		},
		"73": {
			"sourceFileName": "src/isNumber.ts",
			"qualifiedName": "default"
		},
		"74": {
			"sourceFileName": "src/isNumber.ts",
			"qualifiedName": "default"
		},
		"75": {
			"sourceFileName": "src/isNumber.ts",
			"qualifiedName": "x"
		},
		"76": {
			"sourceFileName": "src/isNumeric.ts",
			"qualifiedName": ""
		},
		"77": {
			"sourceFileName": "src/isNumeric.ts",
			"qualifiedName": "default"
		},
		"78": {
			"sourceFileName": "src/isNumeric.ts",
			"qualifiedName": "default"
		},
		"79": {
			"sourceFileName": "src/isNumeric.ts",
			"qualifiedName": "x"
		},
		"80": {
			"sourceFileName": "src/isObject.ts",
			"qualifiedName": ""
		},
		"81": {
			"sourceFileName": "src/isObject.ts",
			"qualifiedName": "default"
		},
		"82": {
			"sourceFileName": "src/isObject.ts",
			"qualifiedName": "default"
		},
		"83": {
			"sourceFileName": "src/isObject.ts",
			"qualifiedName": "x"
		},
		"84": {
			"sourceFileName": "src/isString.ts",
			"qualifiedName": ""
		},
		"85": {
			"sourceFileName": "src/isString.ts",
			"qualifiedName": "default"
		},
		"86": {
			"sourceFileName": "src/isString.ts",
			"qualifiedName": "default"
		},
		"87": {
			"sourceFileName": "src/isString.ts",
			"qualifiedName": "x"
		},
		"88": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": ""
		},
		"89": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": "KebabCaseSettings"
		},
		"90": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": "default"
		},
		"91": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": "default"
		},
		"92": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": "str"
		},
		"93": {
			"sourceFileName": "src/kebabCase.ts",
			"qualifiedName": "settings"
		},
		"94": {
			"sourceFileName": "src/leadingZero.ts",
			"qualifiedName": ""
		},
		"95": {
			"sourceFileName": "src/leadingZero.ts",
			"qualifiedName": "default"
		},
		"96": {
			"sourceFileName": "src/leadingZero.ts",
			"qualifiedName": "default"
		},
		"97": {
			"sourceFileName": "src/leadingZero.ts",
			"qualifiedName": "num"
		},
		"98": {
			"sourceFileName": "src/leadingZero.ts",
			"qualifiedName": "len"
		},
		"99": {
			"sourceFileName": "src/limitDecimals.ts",
			"qualifiedName": ""
		},
		"100": {
			"sourceFileName": "src/limitDecimals.ts",
			"qualifiedName": "default"
		},
		"101": {
			"sourceFileName": "src/limitDecimals.ts",
			"qualifiedName": "default"
		},
		"102": {
			"sourceFileName": "src/limitDecimals.ts",
			"qualifiedName": "num"
		},
		"103": {
			"sourceFileName": "src/limitDecimals.ts",
			"qualifiedName": "decimalCount"
		},
		"104": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": ""
		},
		"105": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": "default"
		},
		"106": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": "default"
		},
		"107": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": "num"
		},
		"108": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": "min"
		},
		"109": {
			"sourceFileName": "src/minMax.ts",
			"qualifiedName": "max"
		},
		"110": {
			"sourceFileName": "src/numberToHex.ts",
			"qualifiedName": ""
		},
		"111": {
			"sourceFileName": "src/numberToHex.ts",
			"qualifiedName": "default"
		},
		"112": {
			"sourceFileName": "src/numberToHex.ts",
			"qualifiedName": "default"
		},
		"113": {
			"sourceFileName": "src/numberToHex.ts",
			"qualifiedName": "num"
		},
		"114": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": ""
		},
		"115": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": "PascalCaseSettings"
		},
		"116": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": "pascalCase"
		},
		"117": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": "pascalCase"
		},
		"118": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": "input"
		},
		"119": {
			"sourceFileName": "src/pascalCase.ts",
			"qualifiedName": "settings"
		},
		"120": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": ""
		},
		"121": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "PhrasifySettings"
		},
		"122": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "__type"
		},
		"123": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "__type.numbers"
		},
		"124": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "phrasify"
		},
		"125": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "phrasify"
		},
		"126": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "input"
		},
		"127": {
			"sourceFileName": "src/phrasify.ts",
			"qualifiedName": "settings"
		},
		"128": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": ""
		},
		"129": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "popIndexPure"
		},
		"130": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "popIndexPure"
		},
		"131": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "list"
		},
		"132": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "index"
		},
		"133": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "popIndex"
		},
		"134": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "popIndex"
		},
		"135": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "list"
		},
		"136": {
			"sourceFileName": "src/popIndex.ts",
			"qualifiedName": "index"
		},
		"137": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": ""
		},
		"138": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "NodeLikeCallback"
		},
		"139": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"140": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"141": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "err"
		},
		"142": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "data"
		},
		"143": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "PromisefyCallback"
		},
		"144": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"145": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"146": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "args"
		},
		"147": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "PromisefiedFunction"
		},
		"148": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"149": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "__type"
		},
		"150": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "args"
		},
		"151": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "default"
		},
		"152": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "default"
		},
		"153": {
			"sourceFileName": "src/promisefy.ts",
			"qualifiedName": "fn"
		},
		"154": {
			"sourceFileName": "src/randomHexColor.ts",
			"qualifiedName": ""
		},
		"155": {
			"sourceFileName": "src/randomHexColor.ts",
			"qualifiedName": "default"
		},
		"156": {
			"sourceFileName": "src/randomHexColor.ts",
			"qualifiedName": "default"
		},
		"157": {
			"sourceFileName": "src/randomId.ts",
			"qualifiedName": ""
		},
		"158": {
			"sourceFileName": "src/randomId.ts",
			"qualifiedName": "default"
		},
		"159": {
			"sourceFileName": "src/randomId.ts",
			"qualifiedName": "default"
		},
		"160": {
			"sourceFileName": "src/randomId.ts",
			"qualifiedName": "length"
		},
		"161": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": ""
		},
		"162": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "randomInt"
		},
		"163": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "randomInt"
		},
		"164": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "min"
		},
		"165": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "max"
		},
		"166": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "randomInt"
		},
		"167": {
			"sourceFileName": "src/randomInt.ts",
			"qualifiedName": "max"
		},
		"168": {
			"sourceFileName": "src/randomRGBColor.ts",
			"qualifiedName": ""
		},
		"169": {
			"sourceFileName": "src/randomRGBColor.ts",
			"qualifiedName": "default"
		},
		"170": {
			"sourceFileName": "src/randomRGBColor.ts",
			"qualifiedName": "default"
		},
		"171": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": ""
		},
		"172": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "RGBTuple"
		},
		"173": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "RGBToHex"
		},
		"174": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "RGBToHex"
		},
		"175": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "rgb"
		},
		"176": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "RGBToHex"
		},
		"177": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "r"
		},
		"178": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "g"
		},
		"179": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "b"
		},
		"180": {
			"sourceFileName": "src/RGBToHex.ts",
			"qualifiedName": "a"
		},
		"181": {
			"sourceFileName": "src/safeDateChange.ts",
			"qualifiedName": ""
		},
		"182": {
			"sourceFileName": "src/safeDateChange.ts",
			"qualifiedName": "default"
		},
		"183": {
			"sourceFileName": "src/safeDateChange.ts",
			"qualifiedName": "default"
		},
		"184": {
			"sourceFileName": "src/safeDateChange.ts",
			"qualifiedName": "from"
		},
		"185": {
			"sourceFileName": "src/safeDateChange.ts",
			"qualifiedName": "to"
		},
		"186": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": ""
		},
		"187": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": "SnakeCaseSettings"
		},
		"188": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": "default"
		},
		"189": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": "default"
		},
		"190": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": "str"
		},
		"191": {
			"sourceFileName": "src/snakeCase.ts",
			"qualifiedName": "settings"
		},
		"192": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": ""
		},
		"193": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "TruncateSettings"
		},
		"194": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "__type"
		},
		"195": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "__type.maxLength"
		},
		"196": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "__type.end"
		},
		"197": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "default"
		},
		"198": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "default"
		},
		"199": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "str"
		},
		"200": {
			"sourceFileName": "src/truncate.ts",
			"qualifiedName": "settings"
		},
		"201": {
			"sourceFileName": "src/uniqueArray.ts",
			"qualifiedName": ""
		},
		"202": {
			"sourceFileName": "src/uniqueArray.ts",
			"qualifiedName": "default"
		},
		"203": {
			"sourceFileName": "src/uniqueArray.ts",
			"qualifiedName": "default"
		},
		"204": {
			"sourceFileName": "src/uniqueArray.ts",
			"qualifiedName": "arr"
		},
		"205": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "camelCase"
		},
		"206": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "capitalize"
		},
		"207": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "chunkString"
		},
		"208": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "currencyFormat"
		},
		"209": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "formatNumber"
		},
		"210": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hash"
		},
		"211": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hexToNumber"
		},
		"212": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "hexToRGB"
		},
		"213": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isBoolean"
		},
		"214": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isFunction"
		},
		"215": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isGenerator"
		},
		"216": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isNumber"
		},
		"217": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isNumeric"
		},
		"218": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isObject"
		},
		"219": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "isString"
		},
		"220": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "kebabCase"
		},
		"221": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "leadingZero"
		},
		"222": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "limitDecimals"
		},
		"223": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "minMax"
		},
		"224": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "numberToHex"
		},
		"225": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "pascalCase"
		},
		"226": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "phrasify"
		},
		"227": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "popIndex"
		},
		"228": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "promisefy"
		},
		"229": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "randomHexColor"
		},
		"230": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "randomId"
		},
		"231": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "randomInt"
		},
		"232": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "randomRGBColor"
		},
		"233": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "RGBToHex"
		},
		"234": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "safeDateChange"
		},
		"235": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "snakeCase"
		},
		"236": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "truncate"
		},
		"237": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": "uniqueArray"
		}
	}
}